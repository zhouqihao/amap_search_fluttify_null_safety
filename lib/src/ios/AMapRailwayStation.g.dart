// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_search_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class AMapRailwayStation extends AMapSearchObject with NSCoding, NSCopying {
  //region constants
  static const String name__ = 'AMapRailwayStation';

  @override
  final String tag__ = 'amap_search_fluttify';

  
  //endregion

  //region creators
  static Future<AMapRailwayStation> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod(
      'ObjectFactory::createAMapRailwayStation',
      {'init': init}
    );
    return AmapSearchFluttifyIOSAs<AMapRailwayStation>(__result__)!;
  }
  
  static Future<List<AMapRailwayStation>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapSearchFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchAMapRailwayStation',
      {'length': length, 'init': init}
    );
    return __result_batch__!
        .map((it) => AmapSearchFluttifyIOSAs<AMapRailwayStation>(it)!)
        .toList();
  }
  
  //endregion

  //region getters
  Future<String?> get_uid() async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_uid", {'__this__': this});
    return __result__;
  }
  
  Future<String?> get_name() async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_name", {'__this__': this});
    return __result__;
  }
  
  Future<AMapGeoPoint?> get_location() async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_location", {'__this__': this});
    return AmapSearchFluttifyIOSAs<AMapGeoPoint>(__result__);
  }
  
  Future<String?> get_adcode() async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_adcode", {'__this__': this});
    return __result__;
  }
  
  Future<String?> get_time() async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_time", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_wait() async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_wait", {'__this__': this});
    return __result__;
  }
  
  Future<bool?> get_isStart() async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_isStart", {'__this__': this});
    return __result__;
  }
  
  Future<bool?> get_isEnd() async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_isEnd", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_uid(String uid) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_uid', <String, dynamic>{'__this__': this, "uid": uid});
  
  
  }
  
  Future<void> set_name(String name) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_name', <String, dynamic>{'__this__': this, "name": name});
  
  
  }
  
  Future<void> set_location(AMapGeoPoint location) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_location', <String, dynamic>{'__this__': this, "location": location});
  
  
  }
  
  Future<void> set_adcode(String adcode) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_adcode', <String, dynamic>{'__this__': this, "adcode": adcode});
  
  
  }
  
  Future<void> set_time(String time) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_time', <String, dynamic>{'__this__': this, "time": time});
  
  
  }
  
  Future<void> set_wait(int wait) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_wait', <String, dynamic>{'__this__': this, "wait": wait});
  
  
  }
  
  Future<void> set_isStart(bool isStart) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_isStart', <String, dynamic>{'__this__': this, "isStart": isStart});
  
  
  }
  
  Future<void> set_isEnd(bool isEnd) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_isEnd', <String, dynamic>{'__this__': this, "isEnd": isEnd});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'AMapRailwayStation{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension AMapRailwayStation_Batch on List<AMapRailwayStation?> {
  //region getters
  Future<List<String?>?> get_uid_batch() async {
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_uid_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List?)!.map((__result__) => __result__).cast<String?>().toList();
  }
  
  Future<List<String?>?> get_name_batch() async {
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_name_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List?)!.map((__result__) => __result__).cast<String?>().toList();
  }
  
  Future<List<AMapGeoPoint?>?> get_location_batch() async {
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_location_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List?)!.map((__result__) => AmapSearchFluttifyIOSAs<AMapGeoPoint>(__result__)).cast<AMapGeoPoint?>().toList();
  }
  
  Future<List<String?>?> get_adcode_batch() async {
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_adcode_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List?)!.map((__result__) => __result__).cast<String?>().toList();
  }
  
  Future<List<String?>?> get_time_batch() async {
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_time_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List?)!.map((__result__) => __result__).cast<String?>().toList();
  }
  
  Future<List<int?>?> get_wait_batch() async {
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_wait_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List?)!.map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<bool?>?> get_isStart_batch() async {
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_isStart_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List?)!.map((__result__) => __result__).cast<bool?>().toList();
  }
  
  Future<List<bool?>?> get_isEnd_batch() async {
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod("AMapRailwayStation::get_isEnd_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List?)!.map((__result__) => __result__).cast<bool?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_uid_batch(List<String> uid) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_uid_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "uid": uid[__i__]}]);
  
  
  }
  
  Future<void> set_name_batch(List<String> name) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_name_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "name": name[__i__]}]);
  
  
  }
  
  Future<void> set_location_batch(List<AMapGeoPoint> location) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_location_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "location": location[__i__]}]);
  
  
  }
  
  Future<void> set_adcode_batch(List<String> adcode) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_adcode_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "adcode": adcode[__i__]}]);
  
  
  }
  
  Future<void> set_time_batch(List<String> time) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_time_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "time": time[__i__]}]);
  
  
  }
  
  Future<void> set_wait_batch(List<int> wait) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_wait_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "wait": wait[__i__]}]);
  
  
  }
  
  Future<void> set_isStart_batch(List<bool> isStart) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_isStart_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "isStart": isStart[__i__]}]);
  
  
  }
  
  Future<void> set_isEnd_batch(List<bool> isEnd) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapRailwayStation::set_isEnd_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "isEnd": isEnd[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}