// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

enum AMapDrivingRouteExcludeType {
  AMapDrivingRouteExcludeTypeNone /* 0 */,
  AMapDrivingRouteExcludeTypeToll /* 1 */,
  AMapDrivingRouteExcludeTypeMotorway /* 2 */,
  AMapDrivingRouteExcludeTypeFerry /* 3 */
}

extension AMapDrivingRouteExcludeTypeToX on AMapDrivingRouteExcludeType {
  int toValue() {
    switch (this) {
      case AMapDrivingRouteExcludeType.AMapDrivingRouteExcludeTypeNone: return 0;
      case AMapDrivingRouteExcludeType.AMapDrivingRouteExcludeTypeToll: return 1;
      case AMapDrivingRouteExcludeType.AMapDrivingRouteExcludeTypeMotorway: return 2;
      case AMapDrivingRouteExcludeType.AMapDrivingRouteExcludeTypeFerry: return 3;
      default: return 0;
    }
  }
}

extension AMapDrivingRouteExcludeTypeFromX on int {
  AMapDrivingRouteExcludeType toAMapDrivingRouteExcludeType() {
    switch (this) {
      case 0: return AMapDrivingRouteExcludeType.AMapDrivingRouteExcludeTypeNone;
      case 1: return AMapDrivingRouteExcludeType.AMapDrivingRouteExcludeTypeToll;
      case 2: return AMapDrivingRouteExcludeType.AMapDrivingRouteExcludeTypeMotorway;
      case 3: return AMapDrivingRouteExcludeType.AMapDrivingRouteExcludeTypeFerry;
      default: return AMapDrivingRouteExcludeType.values[this + 0];
    }
  }
}